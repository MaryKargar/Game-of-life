

## Description
This project implements Conway's Game of Life with support for both single-threaded and multi-threaded (OpenMP) execution. It computes the next generations of a grid of cells based on Conway's rules and supports benchmarking to measure performance for different configurations.

### Features
- **Modes**: Supports sequential (single-threaded) and parallel (multi-threaded) execution.
- **Command-Line Arguments**:
  - `--load <input_file>`: Specifies the input file containing the initial grid.
  - `--generations <n>`: Number of generations to simulate.
  - `--measure`: Enables timing measurements for setup, computation, and finalization.
  - `--threads <n>`: Specifies the number of threads for the OpenMP mode.
- **Output**:
  - Generates `.gol` files for the resulting grid.
  - Generates `.csv` files for timing results.

## Usage
### Build Instructions
1. Clone the repository.
2. Use CMake to build the project:
   ```bash
   mkdir build && cd build
   cmake ..
   make
   ```

### Running the Program
#### Sequential Mode
Run the program in single-threaded mode:
```bash
./GameOfLife --mode seq --load input.gol --generations 250 --measure
```

#### Parallel Mode
Run the program in multi-threaded mode with 4 threads:
```bash
./GameOfLife --mode omp --threads 4 --load input.gol --generations 250 --measure
```

## Input Format
The input file must be in the following format:
- The first line specifies the dimensions of the grid: `<cols>,<rows>`.
- Subsequent lines contain the initial state of the grid, where:
  - `x` represents a live cell.
  - `.` represents a dead cell.

Example:
```
5,5
.....
..x..
..x..
..x..
.....
```

## Output
### Output Files
1. **Grid Output**: Results are saved in `.gol` files named as:
   - `mai21m<grid_name>_cpu_out.gol` (for sequential mode).
   - `mai21m<grid_name>_openmp_out.gol` (for parallel mode).
2. **Timing Results**: Timing measurements are saved in `.csv` files named as:
   - `mai21m<grid_name>_cpu_time.csv`.
   - `mai21m<grid_name>_openmp_time.csv`.

### Example Outputs
#### Grid Output
```
5,5
.....
.....
.xxx.
.....
.....
```

#### Timing Results
```
Setup,Computation,Finalization
00:00.100;00:01.010;00:00.100
```

## How It Works
### Key Functions
1. **`loadBoard`**:
   - Reads the grid dimensions and initial state from the input file.
2. **`computeNextGeneration`**:
   - Applies Conway's rules to compute the next state of the grid.
   - Supports both sequential and parallel execution.
3. **`saveBoard`**:
   - Writes the final state of the grid to an output file.
4. **`saveTimingResults`**:
   - Saves timing data to a CSV file.

### Conway's Rules
- A live cell survives with 2 or 3 neighbors.
- A dead cell becomes alive with exactly 3 neighbors.
- All other cells remain or become dead.

## Requirements
- C++17 or higher
- OpenMP support (for multi-threaded mode)
- CMake (for building the project)

## Testing
### Grid Sizes
- Test with grids of various sizes (e.g., 1000x1000, 1000x2000, ..., 1000x10000).
- Run for 250 generations to benchmark performance.

### Commands for Testing
1. **Sequential Mode**:
   ```bash
   ./GameOfLife --mode seq --load test_1000x1000.gol --generations 250 --measure
   ```
2. **Parallel Mode**:
   ```bash
   ./GameOfLife --mode omp --threads 4 --load test_1000x1000.gol --generations 250 --measure
   ```




